name: Pre-Commit


on:
  pull_request:
  push:
    branches:
      - main


jobs:
# Min Terraform version(s)
  getDirectories:
      name: Get root directories
      runs-on: ubuntu-latest
      steps:
          - name: Checkout
            uses: actions/checkout@v3
          - name: Install Python
            uses: actions/setup-python@v4
            with:
              python-version: 3.x
          - name: Build matrix
            id: matrix
            run: |
              DIRS=$(python -c "import json; import glob; print(json.dumps([x.replace('/versions.tf', '') for x in glob.glob('./**/versions.tf', recursive=True)]))")
              echo "directories=$DIRS" >> $GITHUB_OUTPUT

      outputs:
          directories: ${{ steps.matrix.outputs.directories }}


  preCommitMinVersions:
    name: Min TF validate
    needs: getDirectories
    runs-on: ubuntu-latest
    strategy:
        matrix:
            directory: ${{ fromJson(needs.getDirectories.outputs.directories) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Terraform min/max versions
        id: minMax
        uses: clowdhaus/terraform-min-max@v1.2.0
        with:
          directory: ${{ matrix.directory }}
      - name: Install Terraform v${{ steps.minMax.outputs.minVersion }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ steps.minMax.outputs.minVersion }}
      - name: Execute pre-commit
        # Run only validate pre-commit check on min version supported
        if: ${{ matrix.directory !=  '.' }}
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: terraform_validate --color=always --show-diff-on-failure --files ${{ matrix.directory }}/*
      - name: Execute pre-commit
        # Run only validate pre-commit check on min version supported
        if: ${{ matrix.directory ==  '.' }}
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: terraform_validate --color=always --show-diff-on-failure --files $(ls *.tf)




# Max Terraform version
  getBaseVersion:
    name: Module max TF version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Terraform min/max versions
        id: minMax
        uses: clowdhaus/terraform-min-max@v1.2.0
    outputs:
      minVersion: ${{ steps.minMax.outputs.minVersion }}
      maxVersion: ${{ steps.minMax.outputs.maxVersion }}


  preCommitMaxVersion:
    name: Max TF pre-commit
    runs-on: ubuntu-latest
    needs: getBaseVersion
    strategy:
      fail-fast: false
      matrix:
        version:
          - ${{ needs.getBaseVersion.outputs.maxVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - name: Install Terraform v${{ matrix.version }}
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ matrix.version }}
      - name: Install pre-commit dependency - terraform-docs
        run: |
          TF_DOCS_VER="v0.16.0"
          pushd /tmp
            curl -Lo ./terraform-docs.tar.gz https://github.com/terraform-docs/terraform-docs/releases/download/${TF_DOCS_VER}/terraform-docs-${TF_DOCS_VER}-$(uname)-amd64.tar.gz && tar -xzf terraform-docs.tar.gz && chmod +x terraform-docs && sudo mv terraform-docs /usr/bin/
          popd
      - name: Install pre-commit dependency - tflint
        uses: terraform-linters/setup-tflint@v2
      - name: Execute pre-commit
        # Run all pre-commit checks on max version supported
        if: ${{ matrix.version ==  needs.getBaseVersion.outputs.maxVersion }}
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --color=always --show-diff-on-failure --all-files
